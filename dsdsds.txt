
 
 
 
 
 
 Java多态性理解 - Jack204 - 博客园 
 
 
 
 
 
 
   
 
 
 
 
  

 
 
 
	 
	   			
		
   Jack204   Keep it Simple,Stupid.   
  

 
	 
	 
		 
			
 
	  博客园  
	  首页  
	  新随笔  
	  联系  
	  管理  
	  订阅 
	    
 


			 
				
				 
 
随笔- 159 文章- 0 评论- 33  
				
			  
		  
		
 
 
 
	   Java多态性理解   
		 
			  Java中多态性的实现   什么是多态    
  面向对象的三大特性 ：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。 
  多态的定义 ： 指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）  
  实现多态的技术称为 ：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。 
  多态的作用 ： 消除类型之间的耦合关系 。 
  现实中，关于多态的例子不胜枚举 。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。 
  下面是多态存在的三个必要条件，要求大家做梦时都能背出来！  多态存在的三个必要条件   一、要有继承；     二、要有重写；     三、父类引用指向子类对象  。    多态的好处 ：  1.  可替换性（substitutability）。  多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。 2.  可扩充性（extensibility）。  多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。 3.  接口性（interface-ability）。  多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。 4.  灵活性（flexibility）。  它在应用中体现了灵活多样的操作，提高了使用效率。 5.  简化性（simplicity）。  多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。   Java中多态的实现方式：  接口实现，继承父类进行方法重写，同一个类中进行方法重载。    一个小题目：   （一）相关类     class   A ...{  
           public   String show(D obj)...{  
                  return  ("A and D" );  
         }   
           public   String show(A obj)...{  
                  return  ("A and A" );  
         }   
}   
  class  B  extends   A...{  
           public   String show(B obj)...{  
                  return  ("B and B" );  
         }  
           public   String show(A obj)...{  
                  return  ("B and A" );  
         }   
}  
  class  C  extends   B...{}   
  class  D  extends  B...{}    （二）问题：以下输出结果是什么？    A a1 =  new   A();  
        A a2  =  new   B();  
        B b  =  new   B();  
        C c  =  new   C();   
        D d  =  new   D();   
        System.out.println(a1.show(b));   ①  
        System.out.println(a1.show(c));   ②  
        System.out.println(a1.show(d));   ③  
        System.out.println(a2.show(b));   ④  
        System.out.println(a2.show(c));   ⑤  
        System.out.println(a2.show(d));   ⑥  
        System.out.println(b.show(b));    ⑦  
        System.out.println(b.show(c));    ⑧  
        System.out.println(b.show(d));    ⑨          （三）答案     ①   A and A
②   A and A
③   A and D
④   B and A
⑤   B and A
⑥   A and D
⑦   B and B
⑧   B and B
⑨   A and D     
 
 
 
 
 
 
 
 


		 
		 
	 
	 
	
  
     
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 


	  
	  

	 
		 
			
 
  公告   
 

			   
			
			 
				  
			 
			
		  
	  
	 
	  
	 
	 
		
 
Copyright 2016 Jack204
	  
  
 
 

正文是:	   Java多态性理解   		 			  Java中多态性的实现   什么是多态      面向对象的三大特性 ：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。   多态的定义 ： 指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）    实现多态的技术称为 ：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。   多态的作用 ： 消除类型之间的耦合关系 。   现实中，关于多态的例子不胜枚举 。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。   下面是多态存在的三个必要条件，要求大家做梦时都能背出来！  多态存在的三个必要条件   一、要有继承；     二、要有重写；     三、父类引用指向子类对象  。    多态的好处 ：  1.  可替换性（substitutability）。  多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。 2.  可扩充性（extensibility）。  多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。 3.  接口性（interface-ability）。  多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。 4.  灵活性（flexibility）。  它在应用中体现了灵活多样的操作，提高了使用效率。 5.  简化性（simplicity）。  多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。   Java中多态的实现方式：  接口实现，继承父类进行方法重写，同一个类中进行方法重载。    一个小题目：   （一）相关类     class   A ...{             public   String show(D obj)...{                    return  ("A and D" );           }              public   String show(A obj)...{                    return  ("A and A" );           }   }     class  B  extends   A...{             public   String show(B obj)...{                    return  ("B and B" );           }             public   String show(A obj)...{                    return  ("B and A" );           }   }    class  C  extends   B...{}     class  D  extends  B...{}    （二）问题：以下输出结果是什么？    A a1 =  new   A();          A a2  =  new   B();          B b  =  new   B();          C c  =  new   C();           D d  =  new   D();           System.out.println(a1.show(b));   ①          System.out.println(a1.show(c));   ②          System.out.println(a1.show(d));   ③          System.out.println(a2.show(b));   ④          System.out.println(a2.show(c));   ⑤          System.out.println(a2.show(d));   ⑥          System.out.println(b.show(b));    ⑦          System.out.println(b.show(c));    ⑧          System.out.println(b.show(d));    ⑨          （三）答案     ①   A and A②   A and A③   A and D④   B and A⑤   B and A⑥   A and D⑦   B and B⑧   B and B⑨   A and D       
SimHash.cpp中60行--关键字:态--
SimHash.cpp中60行--关键字:性--
SimHash.cpp中60行--关键字:类--
SimHash.cpp中60行--关键字:system.out.println--
SimHash.cpp中60行--关键字:system--
SimHash.cpp中60行--关键字:println--
0000100000000000011000010000101011000100010000011010011000110001

 
 
 
 
 
 Java多态性理解 - Jack204 - 博客园 
 
 
 
 
 
 
   
 
 
 
 
  

 
 
 
	 
	   			
		
   Jack204   Keep it Simple,Stupid.   
  

 
	 
	 
		 
			
 
	  博客园  
	  首页  
	  新随笔  
	  联系  
	  管理  
	  订阅 
	    
 


			 
				
				 
 
随笔- 159 文章- 0 评论- 33  
				
			  
		  
		
 
 
 
	   Java多态性理解   
		 
			  Java中多态性的实现   什么是多态    
  面向对象的三大特性 ：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。 
  多态的定义 ： 指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）  
  实现多态的技术称为 ：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。 
  多态的作用 ： 消除类型之间的耦合关系 。 
  现实中，关于多态的例子不胜枚举 。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。 
  下面是多态存在的三个必要条件，要求大家做梦时都能背出来！  多态存在的三个必要条件   一、要有继承；     二、要有重写；     三、父类引用指向子类对象  。    多态的好处 ：  1.  可替换性（substitutability）。  多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。 2.  可扩充性（extensibility）。  多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。 3.  接口性（interface-ability）。  多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。 4.  灵活性（flexibility）。  它在应用中体现了灵活多样的操作，提高了使用效率。 5.  简化性（simplicity）。  多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。   Java中多态的实现方式：  接口实现，继承父类进行方法重写，同一个类中进行方法重载。    一个小题目：   （一）相关类     class   A ...{  
           public   String show(D obj)...{  
                  return  ("A and D" );  
         }   
           public   String show(A obj)...{  
                  return  ("A and A" );  
         }   
}   
  class  B  extends   A...{  
           public   String show(B obj)...{  
                  return  ("B and B" );  
         }  
           public   String show(A obj)...{  
                  return  ("B and A" );  
         }   
}  
  class  C  extends   B...{}   
  class  D  extends  B...{}    （二）问题：以下输出结果是什么？    A a1 =  new   A();  
        A a2  =  new   B();  
        B b  =  new   B();  
        C c  =  new   C();   
        D d  =  new   D();   
        System.out.println(a1.show(b));   ①  
        System.out.println(a1.show(c));   ②  
        System.out.println(a1.show(d));   ③  
        System.out.println(a2.show(b));   ④  
        System.out.println(a2.show(c));   ⑤  
        System.out.println(a2.show(d));   ⑥  
        System.out.println(b.show(b));    ⑦  
        System.out.println(b.show(c));    ⑧  
        System.out.println(b.show(d));    ⑨          （三）答案     ①   A and A
②   A and A
③   A and D
④   B and A
⑤   B and A
⑥   A and D
⑦   B and B
⑧   B and B
⑨   A and D     
 
 
 
 
 
 
 
 


		 
		 
	 
	 
	
  
     
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 


	  
	  

	 
		 
			
 
  公告   
 

			   
			
			 
				  
			 
			
		  
	  
	 
	  
	 
	 
		
 
Copyright 2016 Jack204
	  
  
 
 

正文是:	   Java多态性理解   		 			  Java中多态性的实现   什么是多态      面向对象的三大特性 ：封装、继承、多态。从一定角度来看，封装和继承几乎都是为多态而准备的。这是我们最后一个概念，也是最重要的知识点。   多态的定义 ： 指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。（发送消息就是函数调用）    实现多态的技术称为 ：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。   多态的作用 ： 消除类型之间的耦合关系 。   现实中，关于多态的例子不胜枚举 。比方说按下 F1 键这个动作，如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；如果当前在 Word 下弹出的就是 Word 帮助；在 Windows 下弹出的就是 Windows 帮助和支持。同一个事件发生在不同的对象上会产生不同的结果。   下面是多态存在的三个必要条件，要求大家做梦时都能背出来！  多态存在的三个必要条件   一、要有继承；     二、要有重写；     三、父类引用指向子类对象  。    多态的好处 ：  1.  可替换性（substitutability）。  多态对已存在代码具有可替换性。例如，多态对圆Circle类工作，对其他任何圆形几何体，如圆环，也同样工作。 2.  可扩充性（extensibility）。  多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在实现了圆锥、半圆锥以及半球体的多态基础上，很容易增添球体类的多态性。 3.  接口性（interface-ability）。  多态是超类通过方法签名，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。如图8.3 所示。图中超类Shape规定了两个实现多态的接口方法，computeArea()以及computeVolume()。子类，如Circle和Sphere为了实现多态，完善或者覆盖这两个接口方法。 4.  灵活性（flexibility）。  它在应用中体现了灵活多样的操作，提高了使用效率。 5.  简化性（simplicity）。  多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。   Java中多态的实现方式：  接口实现，继承父类进行方法重写，同一个类中进行方法重载。    一个小题目：   （一）相关类     class   A ...{             public   String show(D obj)...{                    return  ("A and D" );           }              public   String show(A obj)...{                    return  ("A and A" );           }   }     class  B  extends   A...{             public   String show(B obj)...{                    return  ("B and B" );           }             public   String show(A obj)...{                    return  ("B and A" );           }   }    class  C  extends   B...{}     class  D  extends  B...{}    （二）问题：以下输出结果是什么？    A a1 =  new   A();          A a2  =  new   B();          B b  =  new   B();          C c  =  new   C();           D d  =  new   D();           System.out.println(a1.show(b));   ①          System.out.println(a1.show(c));   ②          System.out.println(a1.show(d));   ③          System.out.println(a2.show(b));   ④          System.out.println(a2.show(c));   ⑤          System.out.println(a2.show(d));   ⑥          System.out.println(b.show(b));    ⑦          System.out.println(b.show(c));    ⑧          System.out.println(b.show(d));    ⑨          （三）答案     ①   A and A②   A and A③   A and D④   B and A⑤   B and A⑥   A and D⑦   B and B⑧   B and B⑨   A and D       
SimHash.cpp中60行--关键字:态--
SimHash.cpp中60行--关键字:性--
SimHash.cpp中60行--关键字:类--
SimHash.cpp中60行--关键字:system.out.println--
SimHash.cpp中60行--关键字:system--
SimHash.cpp中60行--关键字:println--
0000100000000000011000010000101011000100010000011010011000110001
